{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "Untitled",
      "provenance": [],
      "authorship_tag": "ABX9TyPgz3fduRojliiYKZwXAsdk",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/Skp80/nlptutorial/blob/master/2.0%20Developing%20a%20Deep%20Learning%20Model\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "Y3UD5MD0VK71",
        "colab_type": "text"
      },
      "source": [
        "# **How to Develop Deep Learning Models With Keras**\n",
        "\n",
        "## The 5-Step Model Life-Cycle\n",
        "\n",
        "\n",
        "1.   Define the model.\n",
        "2.   Compile the model.\n",
        "1.   Fit the model.\n",
        "2.   Evaluate the model.\n",
        "1.   Make predictions.\n",
        "\n",
        "Lets take a closer look at the each of the item\n",
        "\n",
        "### 1. Define the Model\n",
        "Defining the model requires that you first select the type of model that you need and then choose the architecture or network topology.\n",
        "\n",
        "From an API perspective, this involves defining the layers of the model, configuring each layer with a number of nodes and activation function, and connecting the layers together into a cohesive model.\n",
        "\n",
        "Models can be defined either with the **Sequential API** or **the Functional API**, and we will take a look at this in the next section.\n",
        "\n",
        "### 2. Compile the Model\n",
        "Compiling the model requires that you first select a [loss function](https://en.wikipedia.org/wiki/Loss_function) that you want to optimize, such as mean squared error or cross-entropy.\n",
        "It also requires that you select an algorithm to perform the optimization procedure, typically [stochastic gradient descent](https://en.wikipedia.org/wiki/Stochastic_gradient_descent), or a modern variation, such as Adam. It may also require that you select any performance metrics to keep track of during the model training process.\n",
        "\n",
        "From an API Perspective, this involves calling a function to compile the model with the chosen configuration, which will prepare the appropriate data structures required for the efficient use of the model you have defined.\n",
        "\n",
        "The optimizer can be specified as a string for a known optimizer class, e.g. ‘sgd‘ for stochastic gradient descent, or you can configure an instance of an optimizer class and use that.\n",
        "\n",
        "For the list of Optimizers please refer to:\n",
        "\n",
        "[tf.keras.optimizers](https://keras.io/optimizers/)\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "z3q05yBGaSRe",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "## Compile the model\n",
        "from keras import sequential\n",
        "\n",
        "# compile the model\n",
        "opt = SGD(learning_rate=0.01, momentum=0.9)\n",
        "model.compile(optimizer=opt, loss='binary_crossentropy')"
      ],
      "execution_count": 0,
      "outputs": []
    }
  ]
}